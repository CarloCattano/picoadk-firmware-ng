name: Build Firmware

on: [push, pull_request]

env:
  CMAKE_VERSION: 3.23.0
  NINJA_VERSION: 1.10.2
  BUILD_TYPE: Release
  CCACHE_VERSION: 4.6

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "UF2 Firmware",
            artifact: "firmware.uf2",
            artifact_files: "main.*",
            os: ubuntu-latest,
            cc: "gcc", cxx: "g++"
          }

    steps:
    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: git submodule update --init --recursive
      
    - name: Install GNU Arm Embedded Toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
          release: latest
          
    - uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install vult
      run: npm install vult -g

    - name: Install zip
      run: sudo apt update && sudo apt install -y zip

    - name: Download Ninja and CMake
      run: |
        # Download and set up CMake and Ninja (this is a simplified version)
        curl -L https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz | tar xz
        sudo mv cmake-${CMAKE_VERSION}-linux-x86_64 /usr/local/cmake

        curl -L https://github.com/ninja-build/ninja/releases/download/v${NINJA_VERSION}/ninja-linux.zip -o ninja-linux.zip
        unzip ninja-linux.zip
        sudo mv ninja /usr/local/bin/ninja

    - name: Configure with CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -G Ninja
        # CMake will write project_name.txt with the project name
        cat project_name.txt  # Just to verify the project name is written

    - name: Build Firmware
      run: |
        cd build
        ninja

    - name: Copy UF2 File
      run: |
        cd build
        # Read project_name.txt to get the actual project name
        PROJECT_NAME=$(cat project_name.txt)
        echo "Project name is: $PROJECT_NAME"
        cp ${PROJECT_NAME}.uf2 ../${{ matrix.config.artifact }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        path: ./${{ matrix.config.artifact }}
        name: ${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Firmware to Release
      id: upload_firmware
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_KEY }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.artifact }}
        asset_content_type: application/octet-stream
